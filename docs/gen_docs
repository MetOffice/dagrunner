#!/usr/bin/env python3
"""
Generate reference documentation for a Python module.

Example usage:
    python generate_docs.py my_module /path/to/docs
"""
import inspect
import importlib
import os
import sys


def gen_source_link(obj, target_root):
    """Generate a markdown link to the source code of an object."""
    source_link = inspect.getsourcefile(obj)
    source_link = os.path.relpath(os.path.realpath(source_link), os.path.realpath(target_root))
    source_line = inspect.getsourcelines(obj)[1]
    return f"[Source]({source_link}#L{source_line})\n\n"


def get_obj_module_dot_path(obj):
    """Derive python dot path for an object."""
    if inspect.ismodule(obj):
        return obj.__name__
    elif hasattr(obj, "__module__"):
        return obj.__module__
    return None


def is_private(obj_name):
    return obj_name.startswith("_") and not obj_name.endswith("__")


def external_dependency(obj, root_package):
    """Return True if the object is an external dependency."""
    ret = False
    module_path = get_obj_module_dot_path(obj)
    if module_path:
        ret = module_path.split(".")[0] != root_package
    return ret


def no_include(obj, module_name):
    """
    Returns True if the object should not be included in the documentation.
    
    If any of the following conditions are met:
    - Definition lives outside the module and is not a private module.
    """
    ret = False
    module_path = get_obj_module_dot_path(obj)
    if module_path:
        ret = module_path != module_name and not module_path.startswith("_")
    return ret


def gen_heading(level, text):
    return f"{'#' * level} {text}:\n\n"


def obj_descriptor(obj):
    return (
        "class" if inspect.isclass(obj) else
        "method" if inspect.ismethod(obj) else
        "function" if inspect.isfunction(obj) else
        "module" if inspect.ismodule(obj) else
        type(obj).__name__ #"Object"
    )


def gen_obj_heading(level, obj, obname):
    """Standardise markdown heading format."""
    if inspect.ismodule(obj):
        module_path = get_obj_module_dot_path(obj)
        obname = module_path
    return f"{'#' * level} {obj_descriptor(obj)}: `{obname}`\n\n"


def gen_obj_link(obj, obname, rel_mod_path=None):
    """
    Generate a markdown link to an object i.e. to an objects corresponding markdown file.

    rel_mod_path makes the link name relative to this module.  If None, the
    link name is the full module path, while setting it to "" will remove the module path.
    """
    heading = gen_obj_heading(0, obj, obname)
    heading = heading.strip().lower()
    removing = ('`', "'", '"', '.', ':')
    replacing = (' ')
    for r in replacing:
        heading = heading.replace(r, "-")
    for r in removing:
        heading = heading.replace(r, "")

    module_path = get_obj_module_dot_path(obj)
    if not module_path:
        # Likely an object, not a type.
        return ""
    module_path_short = module_path
    module_path_full = module_path
    if not inspect.ismodule(obj):
        module_path_full = f"{module_path}.{obname}"
        module_path_short = f"{module_path_short}.{obname}"
    if rel_mod_path:
        rel_mod_path += "."
        module_path_short = module_path_short.replace(rel_mod_path, "")
    if rel_mod_path == "":
        module_path_short = module_path_short.split('.')[-1]
    link_name = f"{obj_descriptor(obj)}: {module_path_short}"

    return (module_path_full, f"[{link_name}]({module_path}.md#{heading})")


def get_obj_call_signature(obj):
    """Get the call signature of an object."""
    call_signature = inspect.signature(obj)
    call_signature_str = []
    for param in call_signature.parameters.values():
        if param.default is not inspect._empty and callable(param.default):
            call_signature_str.append(f"<{obj_descriptor(param.default)} {param.default.__name__}>")
        else:
            call_signature_str.append(str(param))
    call_signature_str = '(' + ', '.join(call_signature_str) + ')'
    return call_signature_str


def gen_obj_markdown(level, obj, obname, target_root):
    """Generate markdown for an object."""
    markdown = gen_obj_heading(level, obj, obname)
    if inspect.isclass(obj) or inspect.isfunction(obj) or inspect.ismodule(obj):
        markdown += gen_source_link(obj, target_root)
        if obname == "ExecuteGraph":
            a = 1
        try:
            call_signature = get_obj_call_signature(obj)
            if call_signature:
                markdown += gen_heading(level+1, "Call Signature")
                markdown += f"```python\n{obname}{str(call_signature)}\n```\n\n"
        except (AttributeError, ValueError, TypeError):
            pass
        obj_doc = inspect.getdoc(obj)
        if obj_doc:
            markdown += f"{obj_doc}\n\n"
    return markdown


def prioritised_get_members(module):
    """Get members of a module, prioritising non documented (imported) at the top."""
    for name, obj in inspect.getmembers(module):
        if no_include(obj, module.__name__):
            yield name, obj
    for name, obj in inspect.getmembers(module):
        if not no_include(obj, module.__name__):
            yield name, obj

    # for member in inspect.getmembers(module, inspect.ismodule):
    #     yield member
    # for member in inspect.getmembers(module):
    #     if not inspect.ismodule(member[1]):
    #         yield member


def generate_markdown_from_module(module_name, target_root):
    root_package = module_name.split('.')[0]

    module = importlib.import_module(module_name)
    name = module.__name__.split('.')[-1]  # module names are returned as 'module_name.submodule_name'
    markdown = gen_obj_markdown(1, module, name, target_root)
    index = [gen_obj_link(module, name, rel_mod_path="")]

    for name, obj in prioritised_get_members(module):
        name = name.split('.')[-1]  # module names are returned as 'module_name.submodule_name'
        if external_dependency(obj, root_package) or is_private(name) or inspect.ismethod(obj) or inspect.isbuiltin(obj) or (name.startswith("_") and name.endswith("__")):
            continue
        if no_include(obj, module_name):
            markdown += f"see {gen_obj_link(obj, name, rel_mod_path=module.__name__)[1]}\n\n"
            continue
        else:
            markdown += gen_obj_markdown(2, obj, name, target_root)

        if inspect.isclass(obj):
            for cls_member_name, cls_member in inspect.getmembers(obj, inspect.ismethod and inspect.isfunction):
                if is_private(cls_member_name):
                    continue
                markdown += gen_obj_markdown(3, cls_member, cls_member_name, target_root)

        index.append(gen_obj_link(obj, name, rel_mod_path=""))
    index = [x for x in index if x]
    return markdown, index


def path_to_module(abs_path, base_path):
    """Convert an absolute path to a module path."""
    relative_path = os.path.relpath(abs_path, base_path)
    module_path = relative_path.replace(os.path.sep, ".")
    module_path = module_path.replace(".py", "")
    return module_path


def gen_markdown(module_dot_path, target_root):
    """
    Generate markdown for a module and write it to it's corresponding markdown file.
    Return an index of markdown object links.
    """
    markdown_content, index = generate_markdown_from_module(module_dot_path, target_root)
    output_file = os.path.join(target_root, f"{module_dot_path}.md")
    with open(output_file, "w") as f:
        f.write(markdown_content)
    print(f"Markdown file '{output_file}' generated successfully!")
    return index


def format_index(index):
    """Format the index for a markdown file."""
    index = sorted(set(index), key=lambda x: x[0])
    return '\n'.join([f"{'  '*len(dot_path.split('.'))}- {link}" for dot_path, link in index])


def generate_markdown_recursive(module_dot_path, target_root):
    """Generate markdown for a module and it's submodules recursively."""
    module = importlib.import_module(module_dot_path)
    base_path = os.path.dirname(importlib.import_module(module_dot_path.split('.')[0]).__path__[0])
    module_path = module.__path__[0]
    toc_filepath = os.path.join(target_root, f"{module_dot_path}_index.md")
    with open(toc_filepath, "w") as f:
        f.write(f"# Index for '{module_dot_path}' reference documentation\nversion: {module.__version__}\n\n")
    index = []

    for root, _, filenames in os.walk(module.__path__[0]):
        # Check if any component of the root path is hidden ('.'), private ('_') or is testing ('tests')
        if any(part.startswith('.') or part.startswith('_') or part.startswith('tests') for part in root.split(os.path.sep)):
            continue

        module_dot_path = path_to_module(root, base_path)
        if importlib.util.find_spec(module_dot_path):
            print(f"{module_dot_path} is a subpackage")
            index.extend(gen_markdown(module_dot_path, target_root))

        for filename in filenames:
            if not filename.startswith('_') and filename.endswith(".py"):
                module_path = os.path.join(root, filename)
                module_dot_path = path_to_module(module_path, base_path)
                print(f"{module_dot_path} is a module")
                index.extend(gen_markdown(module_dot_path, target_root))
    with open(toc_filepath, "a") as f:
        f.write(format_index(index))


if __name__ == "__main__":
    module_path = sys.argv[1]
    target_root = os.path.abspath(sys.argv[2])
    generate_markdown_recursive(module_path, target_root)